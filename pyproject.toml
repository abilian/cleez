[tool]
[tool.poetry]
name = "cleez"
version = "0.1.12"
homepage = "https://github.com/abilian/cleez"
description = "Simple class-based CLI framework."
authors = ["Abilian SAS <sf@abilian.com>"]
readme = "README.md"
classifiers=[
    'Development Status :: 3 - Alpha',
    'Intended Audience :: Developers',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
]
packages = [
    { include = "cleez", from = "src" },
]


[tool.poetry.dependencies]
python = ">=3.9,<4"
termcolor = "^2.2.0"

[tool.poetry.group.dev.dependencies]
## Standard cruft
abilian-devtools = "*"

# Cruft (project templates management)
cruft = "*"
toml = "*"

## /standard cruft
devtools = "^0.11.0"
snoop = "*"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# ---

[tool.isort]
profile = "black"

# ---

# pyproject.toml
[tool.pytest.ini_options]
filterwarnings = [
#    'ignore:.*contextfunction.*:DeprecationWarning',
#    'ignore:.*Unmanaged.*:sqlalchemy.exc.SAWarning'
]
addopts = "--tb=short"
testpaths = [
    "tests",
    "src",
]

# ---

[tool.ruff]
select = [
    "F",
    "E",
    "C90",
    "I",
    "UP",
    "N",
    "YTT",
    "B",
    "A",
    "C4",
    "ICN",
    "Q",
    "S",
    "BLE",
    "RET",
    "SIM",
    "TID",
    "RUF",
    "PLC", "PLE", "PLR", "PLW",
]
# Add later: "ANN", "ERA"...

exclude = [
    "src/cleez/testing.py",
#    ".tox",
#    ".nox",
#    "tests",
#    "sandbox",
#    "doc",
#    "scripts",
#    "tmp",
]

ignore = [
    "S101",  # Use of `assert` detected
    "SIM108", # Use ternary operator
    "A001",  # Shadowing of built-in
    "A002",  # Argument `input` is shadowing a python builtin
    "I001",  # Ruff not agreeing with isort
    "RUF012",  # Mutable class attributes should be annotated
]

# ---

[tool.bandit]
skips = [
  "B404", # blacklist
  "B603", # subprocess_without_shell_equals_true
]

# ---

[tool.pyanalyze]
paths = ["src/"]
import_paths = ["."]

# Additional checks
bare_ignore = true
missing_f = true
use_fstrings = true
value_always_true = true

# TODO: fix issues and activate
#unused_ignore = true
#enforce_no_unused = true
#incompatible_override = true
#missing_parameter_annotation = true
#missing_return_annotation = true
#suggested_parameter_type = true
#suggested_return_type = true
#use_fstrings = true
#value_always_true = true

# TODO: fix issues and remove
attribute_is_never_set = false
duplicate_dict_key = false
import_failed = false
impossible_pattern = false
incompatible_argument = false
incompatible_call = false
incompatible_return_value = false
internal_error = false
missing_return = false
possibly_undefined_name = false
undefined_attribute = false
unused_variable = false

# ---

[tool.deptry]
ignore_obsolete = [
]
ignore_missing = [
]
ignore_transitive = [
]
exclude = [
    '.tox', 'tests', 'sandbox', 'doc', 'scripts',
]


# ---

[tool.pyright]
exclude = [
    '.tox',
    '.nox',
    'tests',
    'sandbox',
    'doc',
    'scripts',
    'tmp',
]
include = ["src"]

# pyright has issues with modules imported from a root __init__.py
reportPrivateImportUsage = false

# Temp
reportGeneralTypeIssues = false
reportMissingImports = false
reportOptionalSubscript = false
